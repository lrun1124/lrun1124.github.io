---
layout:     post
title:      "Array去重的多种实现和分析"
subtitle:   ""
date:       2017-11-07 11:00:00
author:     "Run"
header-img: "img/ArrayUnique-bg.jpg"
tags:
    - JavaScript
---

> “Move on. ”

## 前言
有趣的小问题，似乎经常在面试中出现

### 方法一: 双层循环

外层循环遍历数组，内层循环判断重复，检测到重复即break，无重复则Push进结果数组。

利用Array.prototype.indexOf()可以简化如下：

```js
Array.prototype.unique = function() {
	var res = [];
	this.forEach(function(item){
		if(res.indexOf(item) < 0){
			res.push(item);
		}
	});
	return res;
};
```

>时间复杂度O(n^2)

### 方法二: 排序

先排序后从第二项循环，和前一项不同则加入

```js
Array.prototype.unique = function() {
	var res = [this[0]];
	this.sort();
	for(let i = 1; i < this.length; i++){
		if(this[i] !== this[i-1]){
			res.push(this[i])
		}
	}
	return res;
}
```

>时间复杂度O(log(n)+n)

### 方法三: 利用hash

使用一个Object做hash，循环检测当前项是否在hash中，没有则加入hash并加入数组

```js
Array.prototype.unique = function() {
	var hash = {}, 
		res = [];
	this.forEach(function(item){
		if(!hash[item]){
		 	hash[item] = true;
		 	res.push(item);
		}
	});
	return res;
}
```
>时间复杂度O(n)


### 方法四: 利用ES6的Set

数组构造set会自动去重，set再展开为数组，代码最简洁

```JS
Array.prototype.unique = function(){
	return [...new Set(this)];
}
```

## 效率分析

使用随机函数分别生成length为10^3，10^4，10^5，10^6的随机数，范围为0-500的整数。

结果如下：

10^3

<img src="http://lrun1124.github.io/img/ArrayUnique/ArrayUnique_10^3.png" width="450" height="400"/>

10^4

<img src="http://lrun1124.github.io/img/ArrayUnique/ArrayUnique_10^4.png" width="450" height="400"/>


10^5

<img src="http://lrun1124.github.io/img/ArrayUnique/ArrayUnique_10^5.png" width="450" height="400"/>

10^6

<img src="http://lrun1124.github.io/img/ArrayUnique/ArrayUnique_10^6.png" width="450" height="400"/>

### 结论

可以看到前两种方法使用的时间比后两种高一个数量级，相对而言，第二种排序的方法最耗时；而后两种中，使用set的方法比使用hash的方法更加耗时，所以从耗时的角度，最好的是使用方法三，即使用hash记录，从代码简洁的角度，利用set的机制最好，并且耗时和方法三也在一个数量级。

### Test code
```JS
Array.prototype.unique1 = function() {
	var res = [];
	this.forEach(function(item){
		if(res.indexOf(item) < 0){
			res.push(item);
		}
	});
	return res;
};


Array.prototype.unique2 = function() {
	var res = [this[0]];
	this.sort();
	for(let i = 1; i < this.length; i++){
		if(this[i] !== this[i-1]){
			res.push(this[i])
		}
	}
	return res;
};

Array.prototype.unique3 = function() {
	var hash = {}, 
		res = [];
	this.forEach(function(item){
		if(!hash[item]){
		 	hash[item] = true;
		 	res.push(item);
		}
	});
	return res;
};

Array.prototype.unique4 = function(){
	return [...new Set(this)];
}

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

var count = 10000000;
var testArray = [];
for(let i =0 ; i < count; i++){
	testArray.push(getRandomInt(0,500))
}
var start = new Date().getTime();
console.log(testArray.unique1());
var end = new Date().getTime();
console.log("unique1: " + (end - start) + "ms");

var start = new Date().getTime();
console.log(testArray.unique2());
var end = new Date().getTime();
console.log("unique2: " + (end - start) + "ms");

var start = new Date().getTime();
console.log(testArray.unique3());
var end = new Date().getTime();
console.log("unique3: " + (end - start) + "ms");

var start = new Date().getTime();
console.log(testArray.unique4());
var end = new Date().getTime();
console.log("unique4: " + (end - start) + "ms");
```
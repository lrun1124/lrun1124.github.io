---
layout:     post
title:      "Css Note"
subtitle:   ""
date:       2017-12-07 11:00:00
author:     "Run"
header-img: "img/cssbase1/cssbase1-bg.jpg"
tags:
    - CSS
---

### 1. 盒子模型

CSS的盒子模型，低版本IE的盒子模型有什么不同的？

W3C标准盒子模型，content(内容)，padding(内边距)，border(边框)，margin(外边距)组成

以margin：10px； border：2px； padding：5px； width：200px；height：100px 为例

则整个盒子模型的宽是：10px*2 + 2px*2 + 5px*2 + 200px = 234px

则整个盒子模型的高是：10px*2 + 2px*2 + 5px*2 + 100px = 134px

<img src="http://lrun1124.github.io/img/cssbase1/boxModelW3C.jpg"/>

旧IE，主要是指IE5和（IE6的怪异模式），content部分的width和height是把padding和border也算了进去

整个盒子模型的宽是： margin*2 + width（严格来说是：margin-left + width + margin-right

整个盒子模型的高是： margin*2 + height（严格来说是：margin-left + height + margin-right）

<img src="http://lrun1124.github.io/img/cssbase1/boxModelOldIE.jpg"/>

### 2. CSS选择器

1. id选择器（# myid）
2. 类选择器（.myclassname）
3. 标签选择器（div, h1, p）
4. 相邻选择器（h1 + p）
5. 子选择器（ul > li）
6. 后代选择器（li a）
7. 通配符选择器（ * ）
8. 属性选择器（a[rel = "external"]）
9. 伪类选择器（a:hover, li:nth-child

### 3. display的值及作用

1. block       	块类型。默认宽度为父元素宽度，可设置宽高，换行显示。
2. none        	缺省值。象行内元素类型一样显示。
3. inline      	行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。
4. inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。
5. list-item   	象块类型元素一样显示，并添加样式列表标记。
6. table       	此元素会作为块级表格来显示。
7. inherit     	规定应该从父元素继承 display 属性的值。

### 4. position属性（定位原点）

absolute 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。

fixed （老IE不支持）生成绝对定位的元素，相对于浏览器窗口进行定位。

relative 生成相对定位的元素，相对于其正常位置进行定位。

static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。

inherit 规定从父元素继承 position 属性的值。

### 5. 居中div

#### 水平居中

- 给div设置一个width，然后设置margin:0 auto;

```
div {
	width: 300px;
	margin: 0 auto;
}
```

- 让绝对定位的div居中

```
div {
	positive: absolute;
	width: 300px;
	height: 300px;
	margin: auto;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}
```

### 水平垂直居中

- 若已知容器的宽300px,高400px,则先用top和left将容器左上角定位到中心点位置，再通过设置margin移动div中心点到居中的位置

```
div {
	position: relative;	/* 相对定位或绝对定位均可 */
	width: 300px;
	height: 400px;
	top: 50%;
	left: 50%;
	margin: -200px 0 0 -150px;	/* 外边距为自身宽高的一半的负数 */
}
```

- 未知容器宽高，使用transform属性，定义2D转换

```
div {
	position: relative;	/* 相对定位或绝对定位均可 */
	width: 300px;
	height: 400px;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);	/* 通过translate定义2D转换 */
}
```

- flex布局

```
 .container {
 	display: flex;
 	align-items: center; 		/* 垂直居中 */
 	justify-content: center;	/* 水平居中 */

 }
 .container div {
 	width: 100px;
 	height: 100px;
 	background-color: pink;		/* 方便看效果 */
 }
```

### 6. Flexbox（弹性盒布局模型)

一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。

较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。
采用Flex布局的元素，称为Flex容器（flex container），简称"容器"。
它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称"项目"。
常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做居中，能对不同屏幕大小自适应。
在布局上有了比以前更加灵活的空间

如何兼容低版本浏览器：手动实现响应式，为低版本浏览器些resize函数，根据浏览器窗口大小使用不同样式

### 7. 用纯css创建三角形

```
//设置内容高宽为0，利用下边框border
div {
	width: 0;	//若不为0则为梯形
	height: 0;
	border-width: 20px;
	border-style: solid;
	border-color: transparent transparent red transparent;
}
```

### 8. 清除浮动

当容器的高度为auto时，若容器内部含有浮动元素，则容器的高度不能自动伸长，使得内容溢出到容器外部从而影响页面布局

```
//会产生浮动问题的代码
.news {
  background-color: gray;
  border: solid 1px black;
  }

.news img {
  float: left;
  }

.news p {
  float: right;
  }

<div class="news">
<img src="news-pic.jpg" />
<p>some text</p>
</div>
```
清除浮动的方法可以分为两大类：

### 利用clear属性

1.使用带clear属性的空元素

```
//会产生浮动问题的代码
.news {
  background-color: gray;
  border: solid 1px black;
  }

.news img {
  float: left;
  }

.news p {
  float: right;
  }

.clear {
	clear: both;
}

<div class="news">
<img src="news-pic.jpg" />
<p>some text</p>
<div class="clear"></div>
</div>
```

2.若浮动元素后面有元素，给浮动元素后面的元素加clear属性

```
.news {
  background-color: gray;
  border: solid 1px black;
  }

.news img {
  float: left;
  }

.news p {
  float: right;
  }

.content {
	clear: both;
}

<div class="news">
<img src="news-pic.jpg" />
<p>some text</p>
<div class="content"></div>
</div>
```

3.使用CSS的:after伪元素

```
//通过CSS伪元素在容器的内部元素最后添加了一个看不见的空格"020"或点"."，并且赋予clear属性来清除浮动。需要注意的是为了IE6和IE7浏览器，要给clearfix这个class添加一条zoom:1;触发haslayout
.news {
  background-color: gray;
  border: solid 1px black;
  }

.news img {
  float: left;
  }

.news p {
  float: right;
  }

.clearfix:after{
  content: "020"; 
  display: block; 
  height: 0; 
  clear: both; 
  visibility: hidden;  
  }

.clearfix {
  /* 触发 hasLayout */ 
  zoom: 1; 
  }

<div class="news clearfix">
<img src="news-pic.jpg" />
<p>some text</p>
</div>
```

#### 触发浮动元素父元素的BFC 

(Block Formatting Contexts, 块级格式化上下文)，使该父元素可以包含浮动元素

1.给浮动元素的容器添加overflow:hidden;或overflow:auto

```
.news {
  background-color: gray;
  border: solid 1px black;
  overflow: hidden;
}

.news img {
  float: left;
}

.news p {
  float: right;
}

.clear {
	clear: both;
}

<div class="news">
<img src="news-pic.jpg" />
<p>some text</p>
<div class="clear"></div>
</div>
```

2.给浮动的元素的容器添加浮动

但是这样会使其整体浮动，影响布局，不推荐使用

#### 总结

在网页主要布局时使用:after伪元素方法并作为主要清理浮动方式；在小模块如ul里使用overflow:hidden;（留意可能产生的隐藏溢出元素问题）；如果本身就是浮动元素则可自动清除内部浮动，无需格外处理；正文中使用邻接元素清理之前的浮动。

最后可以使用相对完美的:after伪元素方法清理浮动，文档结构更加清晰。

### 9. CSS优化、提高性能的方式
<br/>
- 选择器效率优化

读取选择器的原则是从右到左。因此，我们书写的右边的最后一个选择器，被称作关键选择器，对于效率有决定性影响。

1. 避免使用通配符

2. 不使用标签名或类名修饰ID规则：如果规则使用ID选择器作为关键选择器，不要给规则添加标签名。因为ID本身就是唯一的，添加标签名会不必要地降低匹配效率。

3. 不使用标签名修饰类：相较于标签，类更具独特性。

4. 尽量选择最具体的方式：造成低效的最简单粗暴的原因就是在标签上使用太多规则。给元素添加类可以更快细分到类方式，可以减少规则去匹配标签的时间。

5. 关于后代选择器和子选择器：避免使用后代选择器，非要用的话建议用子选择器代替，但子选择器也要慎用，标签规则永远不要包含子选择器。

6. 利用可继承性：没必要在一般内容上声明样式。

- 提取项目的通用公有样式，增强可复用性；

- 按模块编写组件；增强项目的协同开发性、可维护性和可扩展性；

- 使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）。

### 10. 浏览器解析选择器过程

样式系统从关键选择器开始，然后向左移查找规则选择器的祖先元素，只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。

### 11. 全屏滚动原理

1. 计算当前浏览器屏幕高度(document.body.clientHeight)，每次翻页显示的内容高度即为屏幕高度
2. 对鼠标滚轮事件进行监听，注意滚轮事件的浏览器兼容问题。
3. 加入时间控制，如果不加滚动会过于灵敏，一次翻好几屏

参考代码：
```
//html
<div id="wrap">
    <div id="main">
        <div id="page1" class="page"></div>
        <div id="page2" class="page"></div>
        <div id="page3" class="page"></div>
        <div id="page4" class="page"></div>
    </div>
</div>
```

```
//css
<style type="text/css">
html,body{
    height:100%;
}
body,ul,li,a,p,div{padding:0px; margin:0px; font-size:14px;}
#wrap{
    overflow: hidden;
    width:100%;
}
#main{
    height:2944px;
    top:0;
    position: relative;
}
.page{
    width:100%;
    margin:0;
}
#page1{
    background:#E4E6CE;
}
#page2{
    background:#6CE26C;
}
#page3{
    background:#BF4938;
}
#page4{
    background:#2932E1;
}
</style>
```

```
//js
<script type="text/javascript">
    var wrap = document.getElementById("wrap");
    var main = document.getElementById("main");
    var hei = document.body.clientHeight;
    wrap.style.height = hei + "px";
    var obj = document.getElementsByTagName("div");
    for(var i=0;i<obj.length;i++){
        if(obj[i].className == 'page'){
             obj[i].style.height = hei + "px";
        }
    }
    //如果不加时间控制，滚动会过度灵敏，一次翻好几屏
    var startTime = 0, //翻屏起始时间  
        endTime = 0,  
        now = 0;     
    //浏览器兼容      
    if ((navigator.userAgent.toLowerCase().indexOf("firefox")!=-1)){   
        document.addEventListener("DOMMouseScroll",scrollFun,false);        
    }  
    else if (document.addEventListener) {  
        document.addEventListener("mousewheel",scrollFun,false);  
    }  
    else if (document.attachEvent) {  
        document.attachEvent("onmousewheel",scrollFun);   
    }  
    else{  
        document.onmousewheel = scrollFun;  
    }  

    //滚动事件处理函数
    function scrollFun(event){
        startTime = new Date().getTime();  
        var delta = event.detail || (-event.wheelDelta);  
        //mousewheel事件中的 “event.wheelDelta” 属性值：返回的如果是正值说明滚轮是向上滚动
        //DOMMouseScroll事件中的 “event.detail” 属性值：返回的如果是负值说明滚轮是向上滚动
        if ((endTime - startTime) < -1000){
            if(delta>0 && parseInt(main.offsetTop) > -(hei*3)){
                //向下滚动
                now = now - hei;
                toPage(now);
        } 
            if(delta<0 && parseInt(main.offsetTop) < 0){
                //向上滚动
                    now = now + hei;
                    toPage(now);
            }
             endTime = new Date().getTime();  
        }
           else{  
                event.preventDefault();    
            }    
    }
     function toPage(now){        
         $("#main").animate({top:(now+'px')},1000);     //jquery实现动画效果
         //setTimeout("main.style.top = now + 'px'",1000);     javascript 实现动画效果
    }   
</script
```

### 12. 伪类和伪元素

定义：
- CSS 伪类用于向某些选择器添加特殊的效果。
- CSS 伪元素用于将特殊的效果添加到某些选择器。

<img src="http://lrun1124.github.io/img/cssbase1/cssbase-class.jpg"/>
<img src="http://lrun1124.github.io/img/cssbase1/cssbase-element.jpg"/>

伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 css3 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。

```
:Pseudo-classes
::Pseudo-elements
```

但因为兼容性的问题，所以现在大部分还是统一的单冒号，但是抛开兼容性的问题，在书写时应该尽可能养成好习惯，区分两者。

### Cookie隔离

cookie隔离技术和传统的多域名拆分请求，提高浏览器并发请求数有点类似，均是采用多域名来处理请求。

传统做法是将css，js，图片等静态文件放在多个域名下面请求，这样就可以跨过浏览器对统一主机名并发连接数的限制，提高整体并发请求量。

cookie隔离技术则是通过使用多个非主要域名来请求静态文件，如果静态文件都放在主域名下，那静态文件请求的时候带有的cookie的数据提交给server是非常浪费的，还不如隔离开。

因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将cookie传入webserver，也减少了webserver对cookie的处理分析环节，提高了webserver的http请求的解析速度。

### 元素竖向的百分比

对于竖直方向的margin和padding，参照父元素的宽度。
对于水平方向的margin和padding，也是参照父元素的宽度
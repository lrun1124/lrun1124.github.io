---
layout:     post
title:      "性能优化"
subtitle:   ""
date:       2019-09-04 12:00:00
author:     "Run"
header-img: "img/ArrayUnique-bg.jpg"
tags:
    - JavaScript
---

> “Move on. ”

核心：减少JS下载时间

## dsn-prefetch，preload, prefetch

dsn-prefetch: 提前解析dsn

```js
<link rel="dns-prefetch" href="//example.com">
```

preload: 浏览器遇到preload，立刻开始下载js，放在内存里，但并不会执行，只有遇到script标签才会执行

```js
<link rel="preload" href="/main.js" as="script">
```
prefetch: 浏览器空闲时候加载，比如下一页

```js
<link rel="preload" href="/main.js" as="script">
```

## 比较好的架构
```
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Faster</title>
  <link rel="dns-prefetch" href="//cdn.com/">
  <link rel="preload" href="//js.cdn.com/currentPage-part1.js" as="script">
  <link rel="preload" href="//js.cdn.com/currentPage-part2.js" as="script">
  <link rel="preload" href="//js.cdn.com/currentPage-part3.js" as="script">

  <link rel="prefetch" href="//js.cdn.com/prefetch.js">
</head>
<body>

<script type="text/javascript" src="//js.cdn.com/currentPage-part1.js" defer></script>
<script type="text/javascript" src="//js.cdn.com/currentPage-part2.js" defer></script>
<script type="text/javascript" src="//js.cdn.com/currentPage-part3.js" defer></script>
</body>
</html>
```

首先，Parser在遇到head中preload时开始下载JS，读到script标签的时候，如果已经下载完了，直接按顺序执行之。如果没下载完，则会等到下载完再执行。这样就可以在刚进入页面时开始非阻塞的下载JS代码了。

其次，页面会在空闲时，加载prefetch的JS，如果之后页面发生跳转，跳转的目标页面引入了prefetch.js，浏览器会直接从disk缓存中读取执行。

将script标签依然放在</body>之前，并增加defer标签，确保老浏览器兼容，并在所有DOM元素解析完成之后执行其中的代码。


## 优化策略

### html层面布局

1. 使用dsn-prefetch, dsn缓存减少dsn获取时间
2. preload, prefetch, async, defer优化js文件加载和执行
3. 模块化JS打包

### request层面
1. 减少http请求次数
2. http Keep-alive 处理好timeout

### css端
1. 尽量使用class修改，减少js直接修改css
2. 使用transform操作动画

### 服务器端
1. 图片服务器，图片压缩，webP，wekpack图片压缩
2. Ngnix

### JS端
1. 减少回流代码，减少dom直接操作，读取引起回流属性
2. 用requestAnimationFrame加强网页的流畅性
3. 使用transform操作动画
4. 必要时使用display:none再修改样式
5. 多次append可以先放到一个临时页面再插入页面
6. localstorge和sessionstorage

---
layout:     post
title:      "浏览器，渲染引擎，JS内核（V8)"
subtitle:   ""
date:       2019-10-21 12:00:00
author:     "Run"
header-img: "img/ArrayUnique-bg.jpg"
tags:
    - JavaScript
---

> “Move on. ”

## 常见的浏览器内核有哪些？

  Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]<br>
  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>
  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]<br>
  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]

## JS内核（V8）

### 浏览器架构

<img src="http://lrun1124.github.io/img/browser/structure.png"/>

1. User Interface 用户界面 - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。
1. Browser engine 浏览器引擎 - 在用户界面和呈现引擎之间传送指令。
1. Render engine 呈现引擎 - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。
1. Networking 网络 - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。
用户界面后端 - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。
1. JavaScript 解释器。用于解析和执行 JavaScript 代码。
1. 数据存储。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。

### 渲染引擎 Render engine
1. GUI渲染线程 (GUI render thread) : 负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行
1. JS引擎线程(V8)（JS thread） : 也称为JS内核，负责处理Javascript脚本程序。（例如V8引擎）JS引擎线程负责解析Javascript脚本，运行代码。JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序
1. 事件触发线程 : 归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）
当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中，当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。 注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）
1. 定时触发器线程。setInterval与setTimeout所在线程，浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）。 注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。
1. 异步http请求线程。 在XMLHttpRequest在连接后是通过浏览器新开一个线程请求将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。

注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。

所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。
由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。

因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。

前文中有提到JS引擎是单线程的，而且JS执行时间过长会阻塞页面，那么JS就真的对cpu密集型计算无能为力么？
所以，后来HTML5中支持了Web Worker。

MDN的官方解释是：
Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面一个worker是使用一个构造函数创建的一个对象(e.g. Worker()) 运行一个命名的JavaScript文件这个文件包含将在工作线程中运行的代码; workers 运行在另一个全局上下文中,不同于当前的window因此，使用window快捷方式获取当前全局的范围 (而不是self) 在一个 Worker 内将返回错误这样理解下：

创建Worker时，JS引擎向浏览器申请开一个子线程（子线程是浏览器开的，完全受主线程控制，而且不能操作DOM）
JS引擎线程与worker线程间通过特定的方式通信（postMessage API，需要通过序列化对象来与线程交互特定的数据）
所以，如果有非常耗时的工作，请单独开一个Worker线程，这样里面不管如何翻天覆地都不会影响JS引擎主线程，只待计算出结果后，将结果通信给主线程即可，perfect!

而且注意下，JS引擎是单线程的，这一点的本质仍然未改变，Worker可以理解是浏览器给JS引擎开的外挂，专门用来解决那些大量计算问题。
WebWorker只属于某个页面，不会和其他页面的Render进程（浏览器内核进程）共享
所以Chrome在Render进程中（每一个Tab页就是一个render进程）创建一个新的线程来运行Worker中的JavaScript程序。

SharedWorker是浏览器所有页面共享的，不能采用与Worker同样的方式实现，因为它不隶属于某个Render进程，可以为多个Render进程共享使用

所以Chrome浏览器为SharedWorker单独创建一个进程来运行JavaScript程序，在浏览器中每个相同的JavaScript只存在一个SharedWorker进程，不管它被创建多少次。

看到这里，应该就很容易明白了，本质上就是进程和线程的区别。SharedWorker由独立的进程管理，WebWorker只是属于render进程下的一个线程

### 流程

<img src="http://lrun1124.github.io/img/browser/browser_workflow.png"/>

1. browser进程收到用户请求，首先需要获取页面内容（譬如通过网络下载资源），随后将该任务通过RendererHost接口传递给Render进程
2. Renderer进程的Renderer接口收到消息，简单解释后，交给渲染线程，然后开始渲染
3. 渲染线程接收请求，加载网页并渲染网页，这其中可能需要Browser进程获取资源和需要GPU进程来帮助渲染, 当然可能会有JS线程操作DOM（这样可能会造成回流并重绘）
4. 最后Render进程将结果传递给Browser进程
5. Browser进程接收到结果并将结果绘制出来

### 渲染进程处理html（webkit为例）

<img src="http://lrun1124.github.io/img/browser/webkit_workflow.png"/>

开一个下载线程，然后进行 http请求（略去DNS查询，IP寻址等等操作），然后等待响应，获取内容，随后将转交给Renderer进程- 渲染大概可以划分成以下几个步骤：

1. 解析html建立dom树
1. 解析css构建CSSOM 树（Recaculate Style）
1. 合并 DOM 树与 CSSOM 树为 Render 树
1. 布局render树（Layout/reflow），负责各元素尺寸、位置的计算
1. 绘制render树（paint），绘制页面像素信息
1. 浏览器会将各层的信息发送给GPU，GPU会将各层复合图层化（composite），显示在屏幕上。
1. 渲染完毕后就是load事件了，之后就是自己的JS逻辑处理了

其中布局（Layout）环节主要负责各元素尺寸、位置的计算，绘制（Paint）环节则是绘制页面像素信息，合成（Composite）环节是多个复合层的合成，最终合成的页面被用户看到。

需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。

1. 当 `DOMContentLoaded` 事件触发时，仅当DOM加载完成，不包括样式表，图片。(譬如如果有async加载的脚本就不一定完成)
1. 当 `onload` 事件触发时，页面上所有的DOM，样式表，脚本，图片都已经加载完成了。

- css加载是否会阻塞dom树渲染？

这里说的是头部引入css的情况
首先，我们都知道：css是由单独的下载线程异步下载的。

然后再说下几个现象：

css加载不会阻塞DOM树解析（异步加载时DOM照常构建）, 但会阻塞render树渲染（渲染时需等css加载完毕，因为render树需要css信息）。 这可能也是浏览器的一种优化机制。因为你加载css的时候，可能会修改下面DOM节点的样式，如果css加载不阻塞render树渲染的话，那么当css加载完之后，render树可能又得重新重绘或者回流了，这就造成了一些没有必要的损耗。所以干脆就先把DOM树的结构先解析完，把可以做的工作做完，然后等你css加载完之后，在根据最终的样式来渲染render树，这种做法性能方面确实会比较好一点。

解析的过程可以分成两个子过程：词法分析和语法分析。

### DOM Tree

<img src="http://lrun1124.github.io/img/browser/domtree.png"/>

浏览器构建 DOM 树可以简单的总结为以下几步：
1. 转码（Bytes ->Characters）—— 读取接收到的 HTML 二进制数据，按指定编码格式将字节转换为 HTML 字符串
1. Tokens 化（Characters ->Tokens）—— 解析 HTML，将 HTML 字符串转换为结构清晰的 Tokens，每个 Token 都有特殊的含义同时有自己的一套规则
1. 构建 Nodes（Tokens ->Nodes）—— 每个 Node 都添加特定的属性（或属性访问器），通过指针能够确定 Node 的父、子、兄弟关系和所属 treeScope（例如：iframe 的 treeScope 与外层页面的 treeScope 不同
1. 构建 DOM 树（Nodes ->DOM Tree）—— 最重要的工作是建立起每个结点的父子兄弟关系

### CSSOM Tree

CSSOM 树的构建其实是一个 样式的重新计算 的过程，为什么是重新计算呢？

用户代理（即浏览器）本身有一套内置样式表，所以我们最终的 CSSOM 树其实是用户代理样式与页面所有样式的重新计算。
所以在 Chrome 浏览器开发者工具的 Timeline 面板下，CSSOM 树的构建对应的是 Recalculate Style 阶段
与 DOM 树的构建过程相似，CSSOM 的构建也要经历以下过程
<img src="http://lrun1124.github.io/img/browser/cssom1.png"/>
<img src="http://lrun1124.github.io/img/browser/cssom2.png"/>

### Render Tree

<img src="http://lrun1124.github.io/img/browser/rendertree.png"/>

DOM 树与 CSSOM 树融合成渲染树
渲染树只包括渲染页面需要的节点
排除 \<script> \<meta> 等功能化、非视觉节点排除 display: none 的节点


### 重绘repaint， 回流reflow

repaint是某个dom元素进行重绘，reflow是整个页面进行重排，也就是对页面所有的dom元素渲染。  
 
repaint的触发：  
1. 不涉及任何dom元素的排版问题的变动为repaint，例如元素的color、text-align等改变。  
1. color的修改，text-align的修改，a：hover也会造成重绘，伪类引起的颜色等变化不会导致页面的回流，仅仅会触发重绘。 

reflow的触发： 
1. width、height、border、margin、padding的修改 
1. 通过hover造成元素表现的改动，如display:none会导致回流 
1. appendChild等dom元素操作。 
1. font类style 的修改。 
1. background的修改，现在经过浏览器厂家的优化，部分background的修改只会触发repaint。

 - 如何尽量避免回流reflow：
 1. 尽可能在dom末稍通过修改class来修改元素的style属性，尽可能减少受影响的dom元素。
 1. 避免设置多项内联样式，使用常用的class方式进行设置样式，以避免设置样式时访问dom的低效率。
 1. 设置动画元素position属性为fixed或absolute：由于当前元素从dom流中独立出来，因此受影响的只有当前元素。
 1. 牺牲平滑度满足性能：动画精度太强，会造成更多的repaint/reflow，牺牲精度，能满足性能的损耗，获取性能和平滑度的平衡。
 1. 避免使用table进行布局，table每个元素的大小以及内容的改变，都会导致整个table进行重新计算，造成大幅度的repaint或者reflow。改用div则可以针对性的repaint和避免不必要的reflow。
 1. 避免在css中使用运算式

由于reflow和repaint都是非常消耗性能的，我们的浏览器为此做了一些优化。浏览器会将reflow和repaint的操作积攒一批，然后做一次reflow。但是有些时候，你的代码会强制浏览器做多次reflow。例如：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化

<img src="http://lrun1124.github.io/img/browser/overflow_code.png"/>

以上第三行代码，需要浏览器reflow后；再获取值，所以会导致浏览器多做一次reflow。

#### 合成composite

在reflow和repaint之后，浏览器会将多个复合层传入GPU；进行合成工作，那么合成是如何工作的呢？

<img src="http://lrun1124.github.io/img/browser/composite_css.png"/>

假设我们的页面中有A和B两个元素，它们有absolute和z-index属性；浏览器会重绘它们，然后将图像发送给GPU；然后GPU将会把多个图像合成，该元素变成一个复合图层，就是传说中的硬件加速技术，之后展示在屏幕上。

<img src="http://lrun1124.github.io/img/browser/composite_pic.png"/>


#### JS事件机制

<img src="http://lrun1124.github.io/img/browser/jsevent.png"/>

JS分为同步任务和异步任务，同步任务都在主线程上执行，主线程运行时会产生执行栈，
栈中的代码调用某些api时，它们会在事件队列中添加各种事件（当满足触发条件后，如ajax请求完毕）

主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。
一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。如此循环, 注意，总是要等待栈中的代码执行完毕后才会去读取事件队列中的事件

setTimeout(function(){console.log('hello!');},0);console.log('begin');这段代码的效果是最快的时间内将回调函数推入事件队列中，等待主线程执行

而且setInterval有一些比较致命的问题就是：累计效应（上面提到的），如果setInterval代码在（setInterval）再次添加到队列之前还没有完成执行，JS高程中有提到，JS引擎会对setInterval进行优化，如果当前事件队列中有setInterval的回调，不会重复添加


#### Eventloop, 宏任务macrotask和微任务microtask

macrotask（又称之为宏任务），可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行），每一个task会从头到尾将这个任务执行完毕，不会执行其它任务，浏览器为了能够使得JS内部task与DOM任务能够有序的执行，会在一个task执行结束后，在下一个 task 执行开始前，对页面进行重新渲染（`task->渲染->task->...`）

microtask（又称为微任务），可以理解是在当前 task 执行结束后立即执行的任务也就是说，在当前task任务后，下一个task之前，在渲染之前执行，所以它的响应速度相比setTimeout（setTimeout是task）会更快，因为无需等渲染，也就是说，在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）

- 流程：

1. 执行一个宏任务（栈中没有就从事件队列中获取）
1. 执行过程中如果遇到微任务，就将它添加到微任务的任务队列中
1. 宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
1. 当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染
1. 渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）

- 分别很么样的场景会形成macrotask和microtask呢？

macrotask：主代码块，setTimeout，setInterval等（可以看到，事件队列中的每一个事件都是一个macrotask）

microtask：Promise，process.nextTick等

<img src="http://lrun1124.github.io/img/browser/eventloop3.png"/>

补充：在node环境下，process.nextTick的优先级高于Promise__，也就是可以简单理解为：在宏任务结束后会先执行微任务队列中的nextTickQueue部分，然后才会执行微任务中的Promise部分。

例子：

<img src="http://lrun1124.github.io/img/browser/eventloop1.png"/>

执行结果

<img src="http://lrun1124.github.io/img/browser/eventloop2.png"/>


#### 硬件加速

可以Chrome源码调试 ->More Tools ->Rendering ->Layer borders中看到，黄色的就是复合图层信息

<img src="http://lrun1124.github.io/img/browser/hardwareAcceleration.png"/>

硬件加速技术是指：使用 GPU 的硬件能力为帮助渲染网页，在为 GPU 的作用主要是用来绘制 3D 图形并且性能特别好。对于 GPU 绘图而言，当网页分层之后，部分区域的更新可能只在网页的一层或者几层，而不需要将整个网页都重新绘制。 通过重新绘制网页的一个或者几个层，并将它们和其他之前绘制完的层合成起来，既能使用 GPU 的能力，又能减少重绘的开销。一般一个元素开启硬件加速后会变成复合图层，可以独立于普通文档流中，改动后可以避免整个页面重绘，提升性能

可以通过硬件加速的方式，声明一个新的复合图层，它会单独分配资源（当然也会脱离普通文档流，这样一来，不管这个复合图层中怎么变化，也不会影响默认复合层里的回流重绘），可以简单理解下：GPU中，各个复合图层是单独绘制的，所以互不影响，这也是为什么某些场景硬件加速效果一级棒

最常用的方式：translate3d、translateZ、opacity属性/过渡动画（需要动画执行的过程中才会创建合成层，动画没有开始或结束后元素还会回到之前的状态）、will-chang属性（这个比较偏僻），一般配合opacity与translate使用（而且经测试，除了上述可以引发硬件加速的属性外，其它属性并不会变成复合层）

<img src="http://lrun1124.github.io/img/browser/animation.png"/>

在这个例子中，对于动画的每一帧；浏览器会计算元素的几何形状，渲染新状态的图像；并把它们发送给GPU。（你没看错，position也会引起浏览器重排的）尽管浏览器做了优化，在repaint时，只会repaint部分区域；但是我们的动画仍然不够流畅。

因为重排和重绘发生在动画的每一帧，一个有效避免reflow和repaint的方式是我们仅仅画两个图像；一个是a元素，一个是b元素及整个页面；我们将这两张图片发送给GPU，然后动画发生的时候；只做两张图片相对对方的平移。也就是说，仅仅合成缓存的图片将会很快；这也是GPU的优势——它能非常快地以亚像素精度地合成图片，并给动画带来平滑的曲线。

为了仅发生composite，我们做动画的css property必须满足以下三个条件：

1. 不影响文档流。
1. 不依赖文档流。
1. 不会造成重绘。

满足以上以上条件的css property只有transform和opacity。你可能以为position也满足以上条件，但事实不是这样，举个例子left属性可以使用百分比的值，依赖于它的offset parent。还有em、vh等其他单位也依赖于他们的环境。我们使用translate来代替left，浏览器在动画执行之前就知道动画如何开始和结束，因为浏览器没有看到需要reflow和repaint的操作；浏览器就会画两张图像作为复合层，并将它们传入GPU。

这样做有两个优势：
1. 动画将会非常流畅
1. 动画不在绑定到CPU，即使js执行大量的工作；动画依然流畅。




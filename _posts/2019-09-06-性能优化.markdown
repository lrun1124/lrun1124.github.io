---
layout:     post
title:      "性能优化"
subtitle:   ""
date:       2019-09-06 12:00:00
author:     "Run"
header-img: "img/ArrayUnique-bg.jpg"
tags:
    - Summary
---

> “Move on. ”

## 性能优化

### 总结

#### 服务器端
1. 图片服务器，图片压缩，webP，wekpack图片压缩
1. Ngnix

#### request层面
1. 减少http请求次数
1. http Keep-alive 处理好timeout
1. cookie隔离
1. 前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数

#### html层面布局
1. 使用dsn-prefetch, dsn缓存减少dsn获取时间
1. preload, prefetch, async, defer优化js文件加载和执行
1. 模块化JS打包

#### JS端
1. 减少回流代码，减少dom直接操作，读取引起回流属性
1. 用requestAnimationFrame加强网页的流畅性
1. 使用transform操作动画
1. 必要时使用display:none再修改样式
1. 多次append可以先放到一个临时页面再插入页面
1. localstorge和sessionstorage
1. 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。

#### css端
1. 尽量使用class修改，减少js直接修改css
1. 使用transform操作动画
1. 避免使用通配符，不使用标签名或类名修饰ID规则
1. 尽量选择最具体的方式，利用关键选择器
1. 使用transform操作动画

#### other
1. 尽量避免使用iframe，阻塞onload，不利于seo，共享连接池影响页面的并行加载，如果需要使用iframe，最好是通过javascript，动态给iframe添加src属性值
1. 禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）；
1. 使用CSS3代码代替JS动画（尽可能避免重绘重排以及回流）；
1. 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU；
1. 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。

## 比较好的架构
```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Faster</title>
  <link rel="dns-prefetch" href="//cdn.com/">
  <link rel="preload" href="//js.cdn.com/currentPage-part1.js" as="script">
  <link rel="preload" href="//js.cdn.com/currentPage-part2.js" as="script">
  <link rel="preload" href="//js.cdn.com/currentPage-part3.js" as="script">

  <link rel="prefetch" href="//js.cdn.com/prefetch.js">
</head>
<body>

<script type="text/javascript" src="//js.cdn.com/currentPage-part1.js" defer></script>
<script type="text/javascript" src="//js.cdn.com/currentPage-part2.js" defer></script>
<script type="text/javascript" src="//js.cdn.com/currentPage-part3.js" defer></script>
</body>
</html>
```

首先，Parser在遇到head中preload时开始下载JS，读到script标签的时候，如果已经下载完了，直接按顺序执行之。如果没下载完，则会等到下载完再执行。这样就可以在刚进入页面时开始非阻塞的下载JS代码了。

其次，页面会在空闲时，加载prefetch的JS，如果之后页面发生跳转，跳转的目标页面引入了prefetch.js，浏览器会直接从disk缓存中读取执行。

将script标签依然放在</body>之前，并增加defer标签，确保老浏览器兼容，并在所有DOM元素解析完成之后执行其中的代码。
